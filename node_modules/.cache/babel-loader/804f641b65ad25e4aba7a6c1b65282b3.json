{"ast":null,"code":"var _jsxFileName = \"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/PostList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Post from \"./Post\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { history } from \"../redux/configureStore\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport LArrow from \"../shared/LArrow.png\";\nimport RArrow from \"../shared/RArrow.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostList = () => {\n  _s();\n\n  const dispatch = useDispatch(); // 카테고리 값 불러오기\n\n  const text = useSelector(state => state.post.text); // 페이지네이션 초기값 1페이지로 설정\n\n  const [page, setPage] = useState(1); // 다음 페이지로 이동\n\n  const pageUp = () => {\n    setPage(page + 1);\n  }; // 이전 페이지로 이동\n\n\n  const pageDown = () => {\n    if (page === 1) {\n      // 첫 페이지일 때 클릭하면 현재가 첫페이지라는 알림울리고 끝내기\n      window.alert(\"첫 페이지입니다.\");\n      return;\n    }\n\n    setPage(page - 1);\n  }; // 페이지 변경 시마다 그 페이지에 상속된 게시글 정보 불러옴\n\n\n  React.useEffect(() => {\n    dispatch(postActions.setPostDB(text, page)); // 현재 카테고리(text)와 페이지 번호(page)에 해당되는 포스트값들 불러오는 함수 실행\n  }, [page]); // page 숫자 변할때마다 가져와야하는 포스트들이 달라지기때문에 두번째항에 page 입력\n\n  const post_list = useSelector(state => state.post.list); // post는 모듈js를 뜻함 post.js 모듈에서 initialState에 list 값을 가져옴\n  // 처음 실행 시 모든 게시글의 정보 불러오기(카테고리구분x)\n\n  React.useEffect(() => {\n    dispatch(postActions.setPostDB());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Wrap, {\n      children: [/*#__PURE__*/_jsxDEV(LeftArrow, {\n        onClick: pageDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostWrap, {\n        children: post_list.map((p, idx) => {\n          let id = p._id;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => {\n              history.push(`post/${id}`);\n            },\n            children: /*#__PURE__*/_jsxDEV(Post, { ...p\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightArrow, {\n        onClick: pageUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostList, \"Xhti96sp5fVpPTgcYaDgy/l90mw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostList;\nexport default PostList;\nconst Wrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n  @media (max-width: 1024px) {\n    & > button {\n      background-size: 4rem 4rem;\n      width: 4rem;\n      height: 4rem;\n    }\n    & > div {\n      width: 75%;\n    }\n  }\n  @media (max-width: 768px) {\n    & > button {\n      background-size: 3rem 3rem;\n      width: 3rem;\n      height: 3rem;\n    }\n    & > div {\n      width: 70%;\n    }\n  }\n  @media (max-width: 414px) {\n    & > button {\n      background-size: 2.2rem 2.2rem;\n      width: 2.2rem;\n      height: 2.2rem;\n      margin: 0px 10px;\n    }\n    & > div {\n      width: 70%;\n    }\n  }\n  @media (max-width: 375px) {\n    & > button {\n      background-size: 2rem 2rem;\n      width: 2rem;\n      height: 2rem;\n      margin: 0px 10px;\n    }\n  }\n  @media (max-width: 280px) {\n    & > button {\n      background-size: 1.5rem 1.5rem;\n      width: 1.5rem;\n      height: 1.5rem;\n      margin: 0px 5px;\n    }\n  }\n`;\n_c2 = Wrap;\nconst PostWrap = styled.div`\n  flex-wrap: wrap;\n  display: flex;\n  width: 62.5rem;\n  margin: 0px auto;\n  justify-content: space-around;\n`;\n_c3 = PostWrap;\nconst LeftArrow = styled.button`\n  background-image: url(${LArrow});\n  background-size: 4.5rem 4.5rem;\n  background-color: #ffffff;\n  width: 4.5rem;\n  height: 4.5rem;\n  margin-left: 1.5rem;\n  border: none;\n`;\n_c4 = LeftArrow;\nconst RightArrow = styled.button`\n  background-image: url(${RArrow});\n  background-size: 4.5rem 4.5rem;\n  background-color: #ffffff;\n  width: 4.5rem;\n  height: 4.5rem;\n  margin-right: 1.5rem;\n  border: none;\n`;\n_c5 = RightArrow;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"PostList\");\n$RefreshReg$(_c2, \"Wrap\");\n$RefreshReg$(_c3, \"PostWrap\");\n$RefreshReg$(_c4, \"LeftArrow\");\n$RefreshReg$(_c5, \"RightArrow\");","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/PostList.js"],"names":["React","useState","Post","styled","useDispatch","useSelector","history","actionCreators","postActions","LArrow","RArrow","PostList","dispatch","text","state","post","page","setPage","pageUp","pageDown","window","alert","useEffect","setPostDB","post_list","list","map","p","idx","id","_id","push","Wrap","div","PostWrap","LeftArrow","button","RightArrow"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Post from \"./Post\";\n\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { history } from \"../redux/configureStore\";\n\nimport { actionCreators as postActions } from \"../redux/modules/post\";\n\nimport LArrow from \"../shared/LArrow.png\";\nimport RArrow from \"../shared/RArrow.png\";\n\nconst PostList = () => {\n  const dispatch = useDispatch();\n\n  // 카테고리 값 불러오기\n  const text = useSelector((state) => state.post.text);\n\n  // 페이지네이션 초기값 1페이지로 설정\n  const [page, setPage] = useState(1);\n\n  // 다음 페이지로 이동\n  const pageUp = () => {\n    setPage(page + 1);\n  };\n\n  // 이전 페이지로 이동\n  const pageDown = () => {\n    if (page === 1) {\n      // 첫 페이지일 때 클릭하면 현재가 첫페이지라는 알림울리고 끝내기\n      window.alert(\"첫 페이지입니다.\");\n      return;\n    }\n    setPage(page - 1);\n  };\n\n  // 페이지 변경 시마다 그 페이지에 상속된 게시글 정보 불러옴\n  React.useEffect(() => {\n    dispatch(postActions.setPostDB(text, page)); // 현재 카테고리(text)와 페이지 번호(page)에 해당되는 포스트값들 불러오는 함수 실행\n  }, [page]); // page 숫자 변할때마다 가져와야하는 포스트들이 달라지기때문에 두번째항에 page 입력\n\n  const post_list = useSelector((state) => state.post.list); // post는 모듈js를 뜻함 post.js 모듈에서 initialState에 list 값을 가져옴\n\n  // 처음 실행 시 모든 게시글의 정보 불러오기(카테고리구분x)\n  React.useEffect(() => {\n    dispatch(postActions.setPostDB());\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Wrap>\n        <LeftArrow onClick={pageDown}></LeftArrow>\n        <PostWrap>\n          {post_list.map((p, idx) => {\n            let id = p._id;\n            return (\n              <div\n                key={id}\n                onClick={() => {\n                  history.push(`post/${id}`);\n                }}\n              >\n                <Post {...p} />\n              </div>\n            );\n          })}\n        </PostWrap>\n        <RightArrow onClick={pageUp}></RightArrow>\n      </Wrap>\n    </React.Fragment>\n  );\n};\n\nexport default PostList;\n\nconst Wrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n  @media (max-width: 1024px) {\n    & > button {\n      background-size: 4rem 4rem;\n      width: 4rem;\n      height: 4rem;\n    }\n    & > div {\n      width: 75%;\n    }\n  }\n  @media (max-width: 768px) {\n    & > button {\n      background-size: 3rem 3rem;\n      width: 3rem;\n      height: 3rem;\n    }\n    & > div {\n      width: 70%;\n    }\n  }\n  @media (max-width: 414px) {\n    & > button {\n      background-size: 2.2rem 2.2rem;\n      width: 2.2rem;\n      height: 2.2rem;\n      margin: 0px 10px;\n    }\n    & > div {\n      width: 70%;\n    }\n  }\n  @media (max-width: 375px) {\n    & > button {\n      background-size: 2rem 2rem;\n      width: 2rem;\n      height: 2rem;\n      margin: 0px 10px;\n    }\n  }\n  @media (max-width: 280px) {\n    & > button {\n      background-size: 1.5rem 1.5rem;\n      width: 1.5rem;\n      height: 1.5rem;\n      margin: 0px 5px;\n    }\n  }\n`;\n\nconst PostWrap = styled.div`\n  flex-wrap: wrap;\n  display: flex;\n  width: 62.5rem;\n  margin: 0px auto;\n  justify-content: space-around;\n`;\n\nconst LeftArrow = styled.button`\n  background-image: url(${LArrow});\n  background-size: 4.5rem 4.5rem;\n  background-color: #ffffff;\n  width: 4.5rem;\n  height: 4.5rem;\n  margin-left: 1.5rem;\n  border: none;\n`;\n\nconst RightArrow = styled.button`\n  background-image: url(${RArrow});\n  background-size: 4.5rem 4.5rem;\n  background-color: #ffffff;\n  width: 4.5rem;\n  height: 4.5rem;\n  margin-right: 1.5rem;\n  border: none;\n`;\n"]},"metadata":{},"sourceType":"module"}