{"ast":null,"code":"import produce from \"immer\";\nimport { createAction, handleActions } from \"redux-actions\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { config } from \"../../shared/config\"; // 액션\n\nconst SET_COMMENT = \"SET_COMMENT\"; // 댓글 불러오기\n\nconst ADD_COMMENT = \"ADD_COMMENT\"; // 댓글 추가\n\nconst DELETE_COMMENT = \"DELETE_COMMENT\"; // 댓글 삭제\n// 액션 생성함수\n\nconst setComment = createAction(SET_COMMENT, list => ({\n  list\n}));\nconst addComment = createAction(ADD_COMMENT, post => ({\n  post\n}));\nconst deleteComment = createAction(DELETE_COMMENT, list => ({\n  list\n})); // Initial State\n\nconst InitialState = {\n  list: []\n}; // DB에 댓글 추가\n\nconst addCommentDB = (user_name, comment, post_id) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"post\",\n      url: `${config.api}/comment/${post_id}`,\n      data: {\n        content: comment\n      }\n    }).then(res => {\n      console.log(res);\n      const new_comment_post = {\n        user: res.data.comment.user,\n        content: res.data.comment.content,\n        createdAt: res.data.comment.createdAt,\n        comment_id: moment()\n      }; // console.log(new_comment_post);\n\n      dispatch(addComment(new_comment_post));\n    });\n  };\n}; // DB 댓글정보 삭제\n// 현재 로그인유저 정보와 댓글 작성자 정보 비교 후 같으면 삭제(서버단에서 토큰값 이용해서 비교해주기로 함)\n\n\nconst deleteCommentDB = comment_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"delete\",\n      url: `${config.api}/comment/${comment_id}`,\n      data: {\n        _id: comment_id\n      }\n    }).then(res => {\n      // console.log(res);\n      dispatch(deleteComment(comment_id));\n    }).catch(err => {\n      console.log(\"댓글삭제 에러\", err);\n    });\n  };\n}; // 댓글 리스트 가져오기\n// 포스트 정보 안에 댓글리스트가 같이 들어있기때문에 post_id 값을 이용해서 댓글리스트 찾고 가져와야함\n\n\nconst getCommentDB = post_id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"get\",\n      url: `${config.api}/comment/${post_id}`\n    }).then(docs => {\n      const comment_list = docs.data.comments; // console.log(comment_list);\n\n      dispatch(setComment(comment_list));\n    }).catch(err => {\n      console.log(\"댓글 가져오기 에러\", err);\n    });\n  };\n}; // 리듀서\n\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {\n    console.log(action.payload);\n    draft.list = action.payload.list;\n  }),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {\n    console.log(action.payload.post);\n    const new_comment = action.payload.post; //가장 앞에 새로운 댓글 추가하기\n\n    draft.list.unshift(new_comment);\n  }),\n  [DELETE_COMMENT]: (state, action) => produce(state, draft => {\n    // 액션으로 넘어온 삭제될 댓글을 제외하고 filter 하여 댓글리스트 업데이트\n    let new_comment_list = draft.list.filter(c => {\n      if (c._id !== action.payload.list) {\n        return c;\n      }\n    });\n    draft.list = new_comment_list;\n  })\n}, InitialState);\nconst actionCreators = {\n  setComment,\n  addComment,\n  deleteComment,\n  deleteCommentDB,\n  getCommentDB,\n  addCommentDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/comment.js"],"names":["produce","createAction","handleActions","axios","moment","config","SET_COMMENT","ADD_COMMENT","DELETE_COMMENT","setComment","list","addComment","post","deleteComment","InitialState","addCommentDB","user_name","comment","post_id","dispatch","getState","history","method","url","api","data","content","then","res","console","log","new_comment_post","user","createdAt","comment_id","deleteCommentDB","_id","catch","err","getCommentDB","docs","comment_list","comments","state","action","draft","payload","new_comment","unshift","new_comment_list","filter","c","actionCreators"],"mappings":"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","sourcesContent":["import produce from \"immer\";\nimport { createAction, handleActions } from \"redux-actions\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { config } from \"../../shared/config\";\n\n// 액션\nconst SET_COMMENT = \"SET_COMMENT\"; // 댓글 불러오기\nconst ADD_COMMENT = \"ADD_COMMENT\"; // 댓글 추가\nconst DELETE_COMMENT = \"DELETE_COMMENT\"; // 댓글 삭제\n\n// 액션 생성함수\nconst setComment = createAction(SET_COMMENT, (list) => ({ list }));\nconst addComment = createAction(ADD_COMMENT, (post) => ({ post }));\nconst deleteComment = createAction(DELETE_COMMENT, (list) => ({ list }));\n\n// Initial State\nconst InitialState = {\n  list: [],\n};\n\n// DB에 댓글 추가\nconst addCommentDB = (user_name, comment, post_id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"post\",\n      url: `${config.api}/comment/${post_id}`,\n      data: { content: comment },\n    }).then((res) => {\n      console.log(res);\n      const new_comment_post = {\n        user: res.data.comment.user,\n        content: res.data.comment.content,\n        createdAt: res.data.comment.createdAt,\n        comment_id: moment(),\n      };\n      // console.log(new_comment_post);\n      dispatch(addComment(new_comment_post));\n    });\n  };\n};\n\n// DB 댓글정보 삭제\n// 현재 로그인유저 정보와 댓글 작성자 정보 비교 후 같으면 삭제(서버단에서 토큰값 이용해서 비교해주기로 함)\nconst deleteCommentDB = (comment_id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"delete\",\n      url: `${config.api}/comment/${comment_id}`,\n      data: {\n        _id: comment_id,\n      },\n    })\n      .then((res) => {\n        // console.log(res);\n        dispatch(deleteComment(comment_id));\n      })\n      .catch((err) => {\n        console.log(\"댓글삭제 에러\", err);\n      });\n  };\n};\n\n// 댓글 리스트 가져오기\n// 포스트 정보 안에 댓글리스트가 같이 들어있기때문에 post_id 값을 이용해서 댓글리스트 찾고 가져와야함\nconst getCommentDB = (post_id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"get\",\n      url: `${config.api}/comment/${post_id}`,\n    })\n      .then((docs) => {\n        const comment_list = docs.data.comments;\n        // console.log(comment_list);\n        dispatch(setComment(comment_list));\n      })\n      .catch((err) => {\n        console.log(\"댓글 가져오기 에러\", err);\n      });\n  };\n};\n\n// 리듀서\nexport default handleActions(\n  {\n    [SET_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload);\n        draft.list = action.payload.list;\n      }),\n\n    [ADD_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload.post);\n        const new_comment = action.payload.post;\n        //가장 앞에 새로운 댓글 추가하기\n        draft.list.unshift(new_comment);\n      }),\n\n    [DELETE_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        // 액션으로 넘어온 삭제될 댓글을 제외하고 filter 하여 댓글리스트 업데이트\n        let new_comment_list = draft.list.filter((c) => {\n          if (c._id !== action.payload.list) {\n            return c;\n          }\n        });\n        draft.list = new_comment_list;\n      }),\n  },\n  InitialState\n);\n\nconst actionCreators = {\n  setComment,\n  addComment,\n  deleteComment,\n  deleteCommentDB,\n  getCommentDB,\n  addCommentDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}