{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { config } from \"../../shared/config\";\nimport axios from \"axios\";\nimport { setCookie, deleteCookie, getCookie } from \"../../shared/Cookie\"; // 액션 타입\n\nconst LOG_OUT = \"LOG_OUT\"; // 로그아웃\n\nconst GET_USER = \"GET_USER\"; //회원정보 조회\n\nconst SET_USER = \"SET_USER\"; // 로그인\n// 액션 생성함수\n\nconst getUser = createAction(GET_USER, user => ({\n  user\n}));\nconst setUser = createAction(SET_USER, user => ({\n  user\n}));\nconst logOut = createAction(LOG_OUT, user => ({\n  user\n})); //  초기값\n// is_login : 로그인 상태인지 아닌지 여부 확인\n\nconst initialState = {\n  user: \"\",\n  is_login: false\n}; // 회원가입\n\nconst signUpDB = (email, nickname, pwd, pwdcheck) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"post\",\n      url: `${config.api}/join`,\n      // 회원가입 시 입력 데이터 보내기(보내기만 하면 끝)\n      data: {\n        email: email,\n        name: nickname,\n        password: pwd,\n        password2: pwdcheck\n      }\n    }).then(() => {\n      window.alert(\"회원가입을 축하드립니다!\");\n      history.push(\"/login\");\n    }).catch(err => {\n      console.log(\"회원가입 에러\", err);\n      window.alert(\"이미 중복된 아이디입니다. 확인해주세요\");\n    });\n  };\n}; // 로그인\n\n\nconst LoginDB = (email, pwd) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"post\",\n      url: `${config.api}/login`,\n      data: {\n        email: email,\n        password: pwd\n      }\n    }).then(res => {\n      // console.log(res.data);\n      // 서버로부터 받은 토큰 변수에 할당\n      const jwtToken = res.data.result.user.token; // 서버로 부터 받은 토큰을 쿠키에 저장 (key:value 형태)\n\n      setCookie(\"is_login\", jwtToken); // 통신 시 헤더에 default 값으로 저장\n\n      axios.defaults.headers.common[\"Authorization\"] = `${jwtToken}`;\n      const user = {\n        email: email,\n        name: res.data.result.user.name\n      };\n      dispatch(setUser(user));\n      history.replace(\"/\");\n    }).catch(err => {\n      window.alert(\"아이디 혹은 비밀번호가 일치하지 않습니다.\");\n      return;\n    });\n  };\n}; // 로그인 후 회원 정보 조회\n\n\n_c = LoginDB;\n\nconst getUserDB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // 로그인 시 쿠키에 이미 is_login으로 토큰이 저장되어 있기 때문에\n    const jwtToken = getCookie(\"is_login\"); // console.log(jwtToken);\n    // 새로고침하면 헤더 default도 날라가기 때문에 다시 토큰을 달아준다.\n    // 백엔드에서 헤더로 넘어온 Authorization 에서 토큰 값에서 토큰값을 뽑아주기로 함.\n\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${jwtToken}`; // console.log(axios.defaults.headers);\n\n    axios({\n      method: \"post\",\n      url: `${config.api}/getUser`\n    }).then(res => {\n      // console.log(res);\n      const user = {\n        email: res.data.email,\n        name: res.data.name,\n        id: res.data.userId\n      };\n      dispatch(getUser(user));\n    }).catch(err => {\n      console.log(\"유저정보 조회 에러\", err);\n    });\n  };\n}; // 리듀서\n\n\nexport default handleActions({\n  [SET_USER]: (state, action) => produce(state, draft => {\n    // 로그인시 받은 회원 정보 저장, is_login 상태 true 변경\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  }),\n  [LOG_OUT]: (state, action) => produce(state, draft => {\n    //쿠키 삭제\n    deleteCookie(\"is_login\"); // 유저정보 삭제 하고 로그인상태 false로 변경\n\n    draft.user = null;\n    draft.is_login = false;\n  }),\n  [GET_USER]: (state, action) => produce(state, draft => {\n    // 로그인상태(is_login) true로 변경\n    draft.user = action.payload.user;\n    draft.is_login = true;\n  })\n}, initialState);\nconst actionCreators = {\n  logOut,\n  setUser,\n  LoginDB,\n  signUpDB,\n  getUserDB\n};\nexport { actionCreators };\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginDB\");","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","config","axios","setCookie","deleteCookie","getCookie","LOG_OUT","GET_USER","SET_USER","getUser","user","setUser","logOut","initialState","is_login","signUpDB","email","nickname","pwd","pwdcheck","dispatch","getState","history","method","url","api","data","name","password","password2","then","window","alert","push","catch","err","console","log","LoginDB","res","jwtToken","result","token","defaults","headers","common","replace","getUserDB","id","userId","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { config } from \"../../shared/config\";\nimport axios from \"axios\";\nimport { setCookie, deleteCookie, getCookie } from \"../../shared/Cookie\";\n\n// 액션 타입\nconst LOG_OUT = \"LOG_OUT\"; // 로그아웃\nconst GET_USER = \"GET_USER\"; //회원정보 조회\nconst SET_USER = \"SET_USER\"; // 로그인\n// 액션 생성함수\nconst getUser = createAction(GET_USER, (user) => ({ user }));\nconst setUser = createAction(SET_USER, (user) => ({ user }));\nconst logOut = createAction(LOG_OUT, (user) => ({ user }));\n\n//  초기값\n// is_login : 로그인 상태인지 아닌지 여부 확인\nconst initialState = {\n  user: \"\",\n  is_login: false,\n};\n\n// 회원가입\nconst signUpDB = (email, nickname, pwd, pwdcheck) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"post\",\n      url: `${config.api}/join`,\n      // 회원가입 시 입력 데이터 보내기(보내기만 하면 끝)\n      data: {\n        email: email,\n        name: nickname,\n        password: pwd,\n        password2: pwdcheck,\n      },\n    })\n      .then(() => {\n        window.alert(\"회원가입을 축하드립니다!\");\n        history.push(\"/login\");\n      })\n      .catch((err) => {\n        console.log(\"회원가입 에러\", err);\n        window.alert(\"이미 중복된 아이디입니다. 확인해주세요\");\n      });\n  };\n};\n\n// 로그인\nconst LoginDB = (email, pwd) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"post\",\n      url: `${config.api}/login`,\n      data: {\n        email: email,\n        password: pwd,\n      },\n    })\n      .then((res) => {\n        // console.log(res.data);\n\n        // 서버로부터 받은 토큰 변수에 할당\n        const jwtToken = res.data.result.user.token;\n\n        // 서버로 부터 받은 토큰을 쿠키에 저장 (key:value 형태)\n        setCookie(\"is_login\", jwtToken);\n\n        // 통신 시 헤더에 default 값으로 저장\n        axios.defaults.headers.common[\"Authorization\"] = `${jwtToken}`;\n\n        const user = {\n          email: email,\n          name: res.data.result.user.name,\n        };\n        dispatch(setUser(user));\n        history.replace(\"/\");\n      })\n      .catch((err) => {\n        window.alert(\"아이디 혹은 비밀번호가 일치하지 않습니다.\");\n        return;\n      });\n  };\n};\n\n// 로그인 후 회원 정보 조회\nconst getUserDB = () => {\n  return function (dispatch, getState, { history }) {\n    // 로그인 시 쿠키에 이미 is_login으로 토큰이 저장되어 있기 때문에\n    const jwtToken = getCookie(\"is_login\");\n    // console.log(jwtToken);\n\n    // 새로고침하면 헤더 default도 날라가기 때문에 다시 토큰을 달아준다.\n    // 백엔드에서 헤더로 넘어온 Authorization 에서 토큰 값에서 토큰값을 뽑아주기로 함.\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${jwtToken}`;\n\n    // console.log(axios.defaults.headers);\n\n    axios({\n      method: \"post\",\n      url: `${config.api}/getUser`,\n    })\n      .then((res) => {\n        // console.log(res);\n        const user = {\n          email: res.data.email,\n          name: res.data.name,\n          id: res.data.userId,\n        };\n        dispatch(getUser(user));\n      })\n      .catch((err) => {\n        console.log(\"유저정보 조회 에러\", err);\n      });\n  };\n};\n\n// 리듀서\nexport default handleActions(\n  {\n    [SET_USER]: (state, action) =>\n      produce(state, (draft) => {\n        // 로그인시 받은 회원 정보 저장, is_login 상태 true 변경\n        draft.user = action.payload.user;\n        draft.is_login = true;\n      }),\n    [LOG_OUT]: (state, action) =>\n      produce(state, (draft) => {\n        //쿠키 삭제\n        deleteCookie(\"is_login\");\n\n        // 유저정보 삭제 하고 로그인상태 false로 변경\n        draft.user = null;\n        draft.is_login = false;\n      }),\n    [GET_USER]: (state, action) =>\n      produce(state, (draft) => {\n        // 로그인상태(is_login) true로 변경\n        draft.user = action.payload.user;\n        draft.is_login = true;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  logOut,\n  setUser,\n  LoginDB,\n  signUpDB,\n  getUserDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}