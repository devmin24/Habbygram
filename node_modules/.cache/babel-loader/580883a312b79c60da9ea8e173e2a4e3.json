{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\";\nimport Comment from \"./modules/comment\";\nimport User from \"./modules/user\";\nimport Post from \"./modules/post\";\nexport const history = createBrowserHistory(); // 루트리듀서(여러개 모듈을 하나로 묶어서 사용)\n\nconst rootReducer = combineReducers({\n  user: User,\n  post: Post,\n  comment: Comment,\n  router: connectRouter(history)\n}); // 미들웨어(thunk로) 설정\n\nconst middlewares = [thunk.withExtraArgument({\n  history: history\n})]; // 현재환경 (개발환경, 프로덕션(배포)환경 ...)\n\nconst env = process.env.NODE_ENV; // 개발환경 - logger사용설정\n\nif (env === \"development\") {\n  const {\n    logger\n  } = require(\"redux-logger\");\n\n  middlewares.push(logger);\n} // 리덕스 데브툴 사용설정\n\n\nconst composeEnhancers = typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n}) : compose; //미들웨어 적용\n\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares)); // 스토어에 루트리듀서와 미들웨어랑 리덕스데브툴 적용된 enhancer 적용\n\nlet store = initialStore => createStore(rootReducer, enhancer);\n\nexport default store();","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/configureStore.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","createBrowserHistory","connectRouter","Comment","User","Post","history","rootReducer","user","post","comment","router","middlewares","withExtraArgument","env","process","NODE_ENV","logger","require","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancer","store","initialStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AAEA,OAAO,MAAMC,OAAO,GAAGL,oBAAoB,EAApC,C,CAEP;;AACA,MAAMM,WAAW,GAAGV,eAAe,CAAC;AAClCW,EAAAA,IAAI,EAAEJ,IAD4B;AAElCK,EAAAA,IAAI,EAAEJ,IAF4B;AAGlCK,EAAAA,OAAO,EAAEP,OAHyB;AAIlCQ,EAAAA,MAAM,EAAET,aAAa,CAACI,OAAD;AAJa,CAAD,CAAnC,C,CAOA;;AACA,MAAMM,WAAW,GAAG,CAACZ,KAAK,CAACa,iBAAN,CAAwB;AAAEP,EAAAA,OAAO,EAAEA;AAAX,CAAxB,CAAD,CAApB,C,CAEA;;AACA,MAAMQ,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAxB,C,CAEA;;AACA,IAAIF,GAAG,KAAK,aAAZ,EAA2B;AACzB,QAAM;AAAEG,IAAAA;AAAF,MAAaC,OAAO,CAAC,cAAD,CAA1B;;AACAN,EAAAA,WAAW,CAACO,IAAZ,CAAiBF,MAAjB;AACD,C,CAED;;;AACA,MAAMG,gBAAgB,GACpB,OAAOC,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,oCAArC,GACID,MAAM,CAACC,oCAAP,CAA4C,CAC1C;AAD0C,CAA5C,CADJ,GAIIvB,OALN,C,CAOA;;AACA,MAAMwB,QAAQ,GAAGH,gBAAgB,CAACtB,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAAjC,C,CAEA;;AACA,IAAIY,KAAK,GAAIC,YAAD,IAAkB7B,WAAW,CAACW,WAAD,EAAcgB,QAAd,CAAzC;;AAEA,eAAeC,KAAK,EAApB","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\";\nimport Comment from \"./modules/comment\";\nimport User from \"./modules/user\";\nimport Post from \"./modules/post\";\n\nexport const history = createBrowserHistory();\n\n// 루트리듀서(여러개 모듈을 하나로 묶어서 사용)\nconst rootReducer = combineReducers({\n  user: User,\n  post: Post,\n  comment: Comment,\n  router: connectRouter(history),\n});\n\n// 미들웨어(thunk로) 설정\nconst middlewares = [thunk.withExtraArgument({ history: history })];\n\n// 현재환경 (개발환경, 프로덕션(배포)환경 ...)\nconst env = process.env.NODE_ENV;\n\n// 개발환경 - logger사용설정\nif (env === \"development\") {\n  const { logger } = require(\"redux-logger\");\n  middlewares.push(logger);\n}\n\n// 리덕스 데브툴 사용설정\nconst composeEnhancers =\n  typeof window === \"object\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\n//미들웨어 적용\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n// 스토어에 루트리듀서와 미들웨어랑 리덕스데브툴 적용된 enhancer 적용\nlet store = (initialStore) => createStore(rootReducer, enhancer);\n\nexport default store();\n"]},"metadata":{},"sourceType":"module"}