{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { config } from \"../../shared/config\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nconst SET_POST = \"SET_POST\"; // 게시글 목록 불러오기\n\nconst ADD_POST = \"ADD_POST\"; // 게시글 작성\n\nconst GET_POST = \"GET_POST\"; // 게시글 상세 불러오기\n\nconst DELETE_POST = \"DELETE_POST\"; // 게시글 삭제\n\nconst EDIT_POST = \"EDIT_POST\"; // 게시글 수정\n\nconst TOGGLE_LIKE = \"TOGGLE_LIKE\"; // 좋아요 토글\n\nconst setPost = createAction(SET_POST, (post_list, text) => ({\n  post_list,\n  text\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst getPost = createAction(GET_POST, (post, is_like) => ({\n  post,\n  is_like\n}));\nconst deletePost = createAction(DELETE_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, post => ({\n  post\n})); // 좋아요\n\nconst toggleLike = createAction(TOGGLE_LIKE, (post, is_like) => ({\n  post,\n  is_like\n}));\nconst initialState = {\n  list: [],\n  post: [],\n  is_like: false,\n  text: null\n};\n\nconst addPostDB = (title, content, imgfile, category, username) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // 이미지가 포함되어있기때문에 formdata로 서버와 소통한다.\n    let formdata = new FormData();\n    formdata.append(\"title\", title);\n    formdata.append(\"img\", imgfile);\n    formdata.append(\"content\", content);\n    formdata.append(\"category\", category);\n    formdata.append(\"user\", username); // // formdata 내부 확인하는 방법\n    // for (var key of formdata.keys()) {\n    //   console.log(key);\n    // }\n    // for (var value of formdata.values()) {\n    //   console.log(value);\n    // }\n\n    axios({\n      method: \"post\",\n      url: `${config.api}/post/write`,\n      data: formdata,\n      header: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }).then(res => {\n      console.log(res);\n      const new_post = {\n        title: res.data.newPost.title,\n        category: res.data.newPost.category,\n        content: res.data.newPost.content,\n        createdAt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n        recommendCnt: res.data.newPost.recommendCnt,\n        comment: res.data.newPost.comment,\n        recommendUser: res.data.newPost.recommendUser,\n        img: res.data.newPost.img,\n        user: res.data.newPost.user\n      };\n      dispatch(addPost(new_post));\n    });\n  };\n};\n\nconst setPostDB = (text = null, page = 1) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // 카테고리 값이 없으면 전체 목록 보여주기\n    if (text === null) {\n      axios({\n        method: \"get\",\n        url: `${config.api}/post?page=${page}`\n      }).then(docs => {\n        const post_list = docs.data; // console.log(post_list);\n        // 페이지 이동 시, 포스트가 하나라도 없다면\n\n        if (post_list.post.length == 0) {\n          window.alert(\"마지막 페이지입니다\");\n          return;\n        }\n\n        dispatch(setPost(post_list));\n      }); // 카테고리별로 보여주기\n    } else {\n      axios({\n        method: \"get\",\n        url: `${config.api}/post/${text}`\n      }).then(docs => {\n        const post_list = docs.data; // console.log(post_list);\n\n        if (post_list.post.length === 0) {\n          window.alert(\"마지막 페이지입니다\");\n          return;\n        }\n\n        dispatch(setPost(post_list, text));\n      });\n    }\n  };\n};\n\nconst getOnePostDB = id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // 좋아요 상태 state 값에서 가져오기\n    let is_like = getState().post.is_like; // 로그인한 유저의 정보 state 값에서 가져오기\n\n    let _user = getState().user.user;\n    axios({\n      method: \"get\",\n      url: `${config.api}/post/detail/${id}`\n    }).then(docs => {\n      // console.log(docs.data);\n      const onePost = docs.data.post; // console.log(onePost);\n      // 좋아요 버튼 상황별 활성화 위해 is_like로 현재 좋아요 상태 체크 할 것임\n      // 좋아요한 유저리스트에 정보가 없으면 is_like는 비활성화상태(false) 있으면 활성화(true)\n      // console.log(_user.id);\n\n      is_like = onePost.recommendUser.findIndex(p => p === _user.id) === -1 ? false : true;\n      dispatch(getPost(onePost, is_like));\n    }).catch(err => {\n      console.log(\"에러\", err);\n    });\n  };\n};\n\nconst editPostDB = (content, title, id) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"patch\",\n      url: `${config.api}/post/${id}`,\n      data: {\n        content: content,\n        title: title\n      }\n    }).then(() => {\n      let new_post_data = {\n        // 새로 받은 값들로 덮어쓰기한다.\n        title: title,\n        _id: id,\n        content: content\n      }; // console.log(new_post_data);\n\n      dispatch(editPost(new_post_data));\n      window.alert(\"수정 되었습니다!\");\n    }).catch(err => {\n      console.log(\"수정에러\", err);\n    });\n  };\n}; // 게시글 DB에서 삭제\n\n\nconst deletePostDB = id => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    axios({\n      method: \"delete\",\n      url: `${config.api}/post/${id}`,\n      data: {\n        _id: id\n      }\n    }).then(res => {\n      // console.log(res);\n      dispatch(deletePost(id));\n    }).catch(err => {\n      console.log(\"삭제에러\", err);\n    });\n  };\n}; // 좋아요 DB 반영\n\n\nconst toggleLikeDB = (post_id, is_like) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    // 현재 포스트의 정보\n    let _post = getState().post.post; // 현재 포스트의 좋아요 수\n\n    let recommendCnt = _post.recommendCnt;\n    axios({\n      method: \"POST\",\n      url: `${config.api}/post/recommend/${post_id}`\n    }).then(res => {\n      console.log(res.data.success); // success 가 true이면 좋아요 +1, false면 좋아요 -1\n\n      recommendCnt = res.data.success ? recommendCnt + 1 : recommendCnt - 1; // 좋아요 상태 success로 T/F 구분\n\n      is_like = res.data.success ? true : false; // 변동된 좋아요 수 반영한 현재 포스트 - 좋아요유저는 데이터상에서 추가하기로함\n\n      const like_post = { ..._post,\n        recommendCnt: recommendCnt\n      }; // console.log(like_post);\n\n      dispatch(toggleLike(like_post, is_like));\n    });\n  };\n}; // 리듀서\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post_list.post;\n    draft.text = action.payload.text;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    console.log(action.payload.post);\n    const new_post = action.payload.post;\n    draft.list.unshift(new_post);\n  }),\n  [GET_POST]: (state, action) => produce(state, draft => {\n    console.log(action.payload);\n    draft.post = action.payload.post;\n    draft.is_like = action.payload.is_like;\n  }),\n  [DELETE_POST]: (state, action) => produce(state, draft => {\n    // 받아온 id값과 맞지 않는 id의 데이터들을 새로운 배열에 넣어서 기존 list에 덮어쓰기해준다.\n    let new_post_list = draft.list.filter(p => {\n      if (p.id !== action.payload.post) {\n        return p;\n      }\n    });\n    draft.list = new_post_list; // 새롭게 바뀐 리스트를 현재의 리스트로 변경\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    // 수정할 포스트의 id로 인덱스를 찾는다.\n    let idx = draft.list.findIndex(p => p._id === action.payload.post._id);\n    draft.post = action.payload.post; // 하나의 포스트의 값들을 최신 값으로 바꿔주고,\n\n    draft.list[idx] = draft.post; // 수정된 값이 들어간 post를 list[idx] 값에 넣어준다.\n\n    console.log(idx);\n  }),\n  [TOGGLE_LIKE]: (state, action) => produce(state, draft => {\n    // 좋아요 숫자가 변동된 post 정보를 업데이트 해주고 is_like 상태도 업데이트 해준다.\n    draft.post = action.payload.post;\n    draft.is_like = action.payload.is_like;\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPost,\n  setPostDB,\n  getOnePostDB,\n  editPostDB,\n  deletePostDB,\n  addPostDB,\n  toggleLikeDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","config","moment","axios","SET_POST","ADD_POST","GET_POST","DELETE_POST","EDIT_POST","TOGGLE_LIKE","setPost","post_list","text","addPost","post","getPost","is_like","deletePost","editPost","toggleLike","initialState","list","addPostDB","title","content","imgfile","category","username","dispatch","getState","history","formdata","FormData","append","method","url","api","data","header","then","res","console","log","new_post","newPost","createdAt","format","recommendCnt","comment","recommendUser","img","user","setPostDB","page","docs","length","window","alert","getOnePostDB","id","_user","onePost","findIndex","p","catch","err","editPostDB","new_post_data","_id","deletePostDB","toggleLikeDB","post_id","_post","success","like_post","state","action","draft","payload","unshift","new_post_list","filter","idx","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { config } from \"../../shared/config\";\nimport moment from \"moment\";\n\nimport axios from \"axios\";\n\nconst SET_POST = \"SET_POST\"; // 게시글 목록 불러오기\nconst ADD_POST = \"ADD_POST\"; // 게시글 작성\nconst GET_POST = \"GET_POST\"; // 게시글 상세 불러오기\nconst DELETE_POST = \"DELETE_POST\"; // 게시글 삭제\nconst EDIT_POST = \"EDIT_POST\"; // 게시글 수정\n\nconst TOGGLE_LIKE = \"TOGGLE_LIKE\"; // 좋아요 토글\n\nconst setPost = createAction(SET_POST, (post_list, text) => ({\n  post_list,\n  text,\n}));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst getPost = createAction(GET_POST, (post, is_like) => ({ post, is_like }));\nconst deletePost = createAction(DELETE_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post) => ({ post }));\n\n// 좋아요\nconst toggleLike = createAction(TOGGLE_LIKE, (post, is_like) => ({\n  post,\n  is_like,\n}));\n\nconst initialState = {\n  list: [],\n  post: [],\n  is_like: false,\n  text: null,\n};\n\nconst addPostDB = (title, content, imgfile, category, username) => {\n  return function (dispatch, getState, { history }) {\n    // 이미지가 포함되어있기때문에 formdata로 서버와 소통한다.\n    let formdata = new FormData();\n    formdata.append(\"title\", title);\n    formdata.append(\"img\", imgfile);\n    formdata.append(\"content\", content);\n    formdata.append(\"category\", category);\n    formdata.append(\"user\", username);\n\n    // // formdata 내부 확인하는 방법\n    // for (var key of formdata.keys()) {\n    //   console.log(key);\n    // }\n    // for (var value of formdata.values()) {\n    //   console.log(value);\n    // }\n\n    axios({\n      method: \"post\",\n      url: `${config.api}/post/write`,\n      data: formdata,\n      header: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    }).then((res) => {\n      console.log(res);\n      const new_post = {\n        title: res.data.newPost.title,\n        category: res.data.newPost.category,\n        content: res.data.newPost.content,\n        createdAt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n        recommendCnt: res.data.newPost.recommendCnt,\n        comment: res.data.newPost.comment,\n        recommendUser: res.data.newPost.recommendUser,\n        img: res.data.newPost.img,\n        user: res.data.newPost.user,\n      };\n      dispatch(addPost(new_post));\n    });\n  };\n};\n\nconst setPostDB = (text = null, page = 1) => {\n  return function (dispatch, getState, { history }) {\n    // 카테고리 값이 없으면 전체 목록 보여주기\n    if (text === null) {\n      axios({\n        method: \"get\",\n        url: `${config.api}/post?page=${page}`,\n      }).then((docs) => {\n        const post_list = docs.data;\n        // console.log(post_list);\n\n        // 페이지 이동 시, 포스트가 하나라도 없다면\n        if (post_list.post.length == 0) {\n          window.alert(\"마지막 페이지입니다\");\n          return;\n        }\n        dispatch(setPost(post_list));\n      });\n      // 카테고리별로 보여주기\n    } else {\n      axios({\n        method: \"get\",\n        url: `${config.api}/post/${text}`,\n      }).then((docs) => {\n        const post_list = docs.data;\n        // console.log(post_list);\n        if (post_list.post.length === 0) {\n          window.alert(\"마지막 페이지입니다\");\n          return;\n        }\n        dispatch(setPost(post_list, text));\n      });\n    }\n  };\n};\n\nconst getOnePostDB = (id) => {\n  return function (dispatch, getState, { history }) {\n    // 좋아요 상태 state 값에서 가져오기\n    let is_like = getState().post.is_like;\n\n    // 로그인한 유저의 정보 state 값에서 가져오기\n    let _user = getState().user.user;\n\n    axios({\n      method: \"get\",\n      url: `${config.api}/post/detail/${id}`,\n    })\n      .then((docs) => {\n        // console.log(docs.data);\n        const onePost = docs.data.post;\n        // console.log(onePost);\n\n        // 좋아요 버튼 상황별 활성화 위해 is_like로 현재 좋아요 상태 체크 할 것임\n        // 좋아요한 유저리스트에 정보가 없으면 is_like는 비활성화상태(false) 있으면 활성화(true)\n        // console.log(_user.id);\n        is_like =\n          onePost.recommendUser.findIndex((p) => p === _user.id) === -1\n            ? false\n            : true;\n\n        dispatch(getPost(onePost, is_like));\n      })\n      .catch((err) => {\n        console.log(\"에러\", err);\n      });\n  };\n};\n\nconst editPostDB = (content, title, id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"patch\",\n      url: `${config.api}/post/${id}`,\n      data: {\n        content: content,\n        title: title,\n      },\n    })\n      .then(() => {\n        let new_post_data = {\n          // 새로 받은 값들로 덮어쓰기한다.\n          title: title,\n          _id: id,\n          content: content,\n        };\n        // console.log(new_post_data);\n        dispatch(editPost(new_post_data));\n        window.alert(\"수정 되었습니다!\");\n      })\n      .catch((err) => {\n        console.log(\"수정에러\", err);\n      });\n  };\n};\n\n// 게시글 DB에서 삭제\nconst deletePostDB = (id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"delete\",\n      url: `${config.api}/post/${id}`,\n      data: {\n        _id: id,\n      },\n    })\n      .then((res) => {\n        // console.log(res);\n        dispatch(deletePost(id));\n      })\n      .catch((err) => {\n        console.log(\"삭제에러\", err);\n      });\n  };\n};\n\n// 좋아요 DB 반영\nconst toggleLikeDB = (post_id, is_like) => {\n  return function (dispatch, getState, { history }) {\n    // 현재 포스트의 정보\n    let _post = getState().post.post;\n\n    // 현재 포스트의 좋아요 수\n    let recommendCnt = _post.recommendCnt;\n\n    axios({\n      method: \"POST\",\n      url: `${config.api}/post/recommend/${post_id}`,\n    }).then((res) => {\n      console.log(res.data.success);\n      // success 가 true이면 좋아요 +1, false면 좋아요 -1\n      recommendCnt = res.data.success ? recommendCnt + 1 : recommendCnt - 1;\n\n      // 좋아요 상태 success로 T/F 구분\n      is_like = res.data.success ? true : false;\n\n      // 변동된 좋아요 수 반영한 현재 포스트 - 좋아요유저는 데이터상에서 추가하기로함\n      const like_post = {\n        ..._post,\n        recommendCnt: recommendCnt,\n      };\n      // console.log(like_post);\n\n      dispatch(toggleLike(like_post, is_like));\n    });\n  };\n};\n\n// 리듀서\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.post_list.post;\n        draft.text = action.payload.text;\n      }),\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload.post);\n        const new_post = action.payload.post;\n        draft.list.unshift(new_post);\n      }),\n\n    [GET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload);\n        draft.post = action.payload.post;\n        draft.is_like = action.payload.is_like;\n      }),\n\n    [DELETE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 받아온 id값과 맞지 않는 id의 데이터들을 새로운 배열에 넣어서 기존 list에 덮어쓰기해준다.\n        let new_post_list = draft.list.filter((p) => {\n          if (p.id !== action.payload.post) {\n            return p;\n          }\n        });\n        draft.list = new_post_list; // 새롭게 바뀐 리스트를 현재의 리스트로 변경\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 수정할 포스트의 id로 인덱스를 찾는다.\n        let idx = draft.list.findIndex(\n          (p) => p._id === action.payload.post._id\n        );\n        draft.post = action.payload.post; // 하나의 포스트의 값들을 최신 값으로 바꿔주고,\n        draft.list[idx] = draft.post; // 수정된 값이 들어간 post를 list[idx] 값에 넣어준다.\n        console.log(idx);\n      }),\n\n    [TOGGLE_LIKE]: (state, action) =>\n      produce(state, (draft) => {\n        // 좋아요 숫자가 변동된 post 정보를 업데이트 해주고 is_like 상태도 업데이트 해준다.\n        draft.post = action.payload.post;\n        draft.is_like = action.payload.is_like;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPost,\n  setPostDB,\n  getOnePostDB,\n  editPostDB,\n  deletePostDB,\n  addPostDB,\n  toggleLikeDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}