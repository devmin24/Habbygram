[{"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/index.js":"1","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/reportWebVitals.js":"2","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/App.js":"3","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/configureStore.js":"4","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/Cookie.js":"5","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/PostDetail.js":"6","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/PostWrite.js":"7","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/Main.js":"8","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/Login.js":"9","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/PostEdit.js":"10","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/Signup.js":"11","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/user.js":"12","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/comment.js":"13","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/post.js":"14","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/Header.js":"15","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/CommentButton.js":"16","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/CommentPost.js":"17","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/HeartButton.js":"18","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/common.js":"19","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/category.js":"20","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/config.js":"21","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/PostList.js":"22","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Index.js":"23","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/Post.js":"24","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Grid.js":"25","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Input.js":"26","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Image.js":"27","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Text.js":"28","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Upload.js":"29"},{"size":590,"mtime":1619492195284,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1619492195287,"results":"32","hashOfConfig":"31"},{"size":1596,"mtime":1619518593213,"results":"33","hashOfConfig":"31"},{"size":1505,"mtime":1619492195285,"results":"34","hashOfConfig":"31"},{"size":909,"mtime":1619492195288,"results":"35","hashOfConfig":"31"},{"size":9927,"mtime":1619492195284,"results":"36","hashOfConfig":"31"},{"size":6889,"mtime":1619492195285,"results":"37","hashOfConfig":"31"},{"size":742,"mtime":1619492195284,"results":"38","hashOfConfig":"31"},{"size":3675,"mtime":1619492195284,"results":"39","hashOfConfig":"31"},{"size":4302,"mtime":1619492195285,"results":"40","hashOfConfig":"31"},{"size":4549,"mtime":1619492195285,"results":"41","hashOfConfig":"31"},{"size":4319,"mtime":1619492195286,"results":"42","hashOfConfig":"31"},{"size":3525,"mtime":1619492195286,"results":"43","hashOfConfig":"31"},{"size":8665,"mtime":1619492195286,"results":"44","hashOfConfig":"31"},{"size":4978,"mtime":1619492195281,"results":"45","hashOfConfig":"31"},{"size":594,"mtime":1619492195280,"results":"46","hashOfConfig":"31"},{"size":3600,"mtime":1619492195281,"results":"47","hashOfConfig":"31"},{"size":775,"mtime":1619492195281,"results":"48","hashOfConfig":"31"},{"size":672,"mtime":1619492195289,"results":"49","hashOfConfig":"31"},{"size":3376,"mtime":1619492195281,"results":"50","hashOfConfig":"31"},{"size":99,"mtime":1619492195289,"results":"51","hashOfConfig":"31"},{"size":3839,"mtime":1619492195281,"results":"52","hashOfConfig":"31"},{"size":189,"mtime":1619492195282,"results":"53","hashOfConfig":"31"},{"size":3022,"mtime":1619492195281,"results":"54","hashOfConfig":"31"},{"size":1257,"mtime":1619492195282,"results":"55","hashOfConfig":"31"},{"size":2677,"mtime":1619492195282,"results":"56","hashOfConfig":"31"},{"size":1810,"mtime":1619492195282,"results":"57","hashOfConfig":"31"},{"size":896,"mtime":1619492195282,"results":"58","hashOfConfig":"31"},{"size":382,"mtime":1619492195282,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"axe5ue",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/index.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/reportWebVitals.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/App.js",["125"],"import React from \"react\";\nimport \"./App.css\";\n\nimport { Route } from \"react-router-dom\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { history } from \"../redux/configureStore\";\n\nimport Main from \"../pages/Main\";\nimport Header from \"../components/Header\";\nimport PostWrite from \"../pages/PostWrite\";\nimport PostEdit from \"../pages/PostEdit\";\nimport PostDetail from \"../pages/PostDetail\";\nimport Login from \"../pages/Login\";\nimport Signup from \"../pages/Signup\";\n\nimport { getCookie } from \"../shared/Cookie\";\nimport { useDispatch } from \"react-redux\";\nimport { actionCreators as userActions } from \"../redux/modules/user\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const cookie = getCookie(\"is_login\") ? true : false;\n\n  // 쿠키가 있으면 새로고침 시 회원정보를 불러와 is_login = true를 유지 시켜준다.(로그인 후 날아가는 유저정보 유지장치)\n  React.useEffect(() => {\n    if (cookie) {\n      dispatch(userActions.getUserDB());\n    }\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <Header />\n        <ConnectedRouter history={history}>\n          <Route path=\"/\" exact component={Main} />\n          <Route path=\"/write\" exact component={PostWrite} />\n          <Route path=\"/post/:id\" exact component={PostDetail} />\n          <Route path=\"/post/:id/edit\" exact component={PostEdit} />\n          <Route path=\"/login\" exact component={Login} />\n          <Route path=\"/signup\" exact component={Signup} />\n        </ConnectedRouter>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/configureStore.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/Cookie.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/PostDetail.js",["126","127"],"import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport styled from \"styled-components\";\nimport { Grid, Input, Text, Image } from \"../element/Index\";\nimport moment from \"moment\";\n\nimport CommentButton from \"../components/CommentButton\";\nimport CommentPost from \"../components/CommentPost\";\nimport HeartButton from \"../components/HeartButton\";\n\nimport { actionCreators as commentActions } from \"../redux/modules/comment\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\n\nimport { history } from \"../redux/configureStore\";\nimport { RepeatRounded } from \"@material-ui/icons\";\n\nconst PostDetail = (props) => {\n  const dispatch = useDispatch();\n\n  const [comment, setComment] = React.useState(\"\");\n\n  //포스트 id 추출\n  const post_id = props.match.params.id;\n\n  // 유저정보 불러오기\n  const user = useSelector((state) => state.user.user);\n\n  // 유저정보가 변할때(로그인유저바뀔때) 내가쓴게시글인지 내가쓴 댓글인지 확인 후 렌더링(수정,삭제 버튼 표시유무/ 좋아요 눌렀는지 표시)\n  React.useEffect(() => {\n    dispatch(postActions.getOnePostDB(post_id));\n    dispatch(commentActions.getCommentDB(post_id));\n  }, [user]);\n\n  // 게시글 정보 불러오기\n  const post = useSelector((state) => state.post.post);\n\n  // 댓글 불러오기\n  const comment_list = useSelector((state) => state.comment.list);\n\n  // 댓글없으면 그냥 없는대로 렌더링(오류방지)\n  if (!comment_list) {\n    return null;\n  }\n\n  //게시글 삭제함수\n  const deletePost = () => {\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\n      dispatch(postActions.deletePostDB(post_id));\n      window.alert(\"삭제되었습니다!\");\n      history.replace(\"/\");\n    } else {\n      return;\n    }\n  };\n\n  // 좋아요 실행함수\n  const changeLike = (e) => {\n    // 이벤트 버블링,캡쳐링 방지\n    e.preventDefault();\n    e.stopPropagation();\n\n    // 로그인 없이 좋아요 기능 눌렀을때 알림과함께 로그인화면으로 보내기\n    if (!user) {\n      window.alert(\"로그인이 필요합니다.\");\n      history.push(\"/login\");\n      return;\n    }\n    // 좋아요 현재 상태값 갖고 좋아요 함수 실행\n    const is_like = props.is_like;\n    dispatch(postActions.toggleLikeDB(post_id, is_like));\n  };\n\n  // 댓글작성 실행함수\n  const addComment = () => {\n    // 로그인 없이 댓글 작성시 알림창 생성\n    if (!user) {\n      window.alert(\"로그인이 필요합니다.\");\n      return;\n    }\n\n    // 댓글 입력내용없이 작성버튼누를시 내용입력하라는 알림창 생성\n    if (!comment) {\n      window.alert(\"댓글 내용을 입력해주세요.\");\n      return;\n    }\n    dispatch(commentActions.addCommentDB(user.name, comment, post_id));\n    window.alert(\"댓글을 게시하였습니다.\");\n  };\n\n  return (\n    <React.Fragment>\n      <Wrapper>\n        {/* 유저 이름과 작성자 이름이 동일하면 수정/삭제 버튼 생성, 아니면 빈값 */}\n        {user.name === post.user ? (\n          <Topbutton>\n            <div style={{ marginRight: \"0.5rem\" }}>\n              <Button\n                onClick={() => {\n                  history.push(`/post/${post_id}/edit`);\n                }}\n              >\n                수정\n              </Button>\n            </div>\n            <div>\n              <Button onClick={deletePost}>삭제</Button>\n            </div>\n          </Topbutton>\n        ) : (\n          <></> // 빈 값 <React.Fragment>랑 같은 것\n        )}\n\n        <Grid padding=\"0px\">\n          <Text bold size=\"30px\">\n            {post.title}\n          </Text>\n          <InfoWrap>\n            <InfoBox>\n              <InfoText>{moment(post.createdAt).format(\"YYYY-MM-DD\")}</InfoText>\n              <span style={{ marginLeft: \"0.4rem\", marginRight: \"0.4rem\" }}>\n                ·\n              </span>\n              <InfoText>{post.user}</InfoText>\n              <span style={{ marginLeft: \"0.4rem\", marginRight: \"0.4rem\" }}>\n                ·\n              </span>\n              <InfoText>{post.category}</InfoText>\n            </InfoBox>\n            <LikeCommentBox>\n              <div\n                style={{\n                  display: \"flex\",\n                  lineHeight: \"1.5\",\n                  color: \"rgb(134, 142, 150)\",\n                  width: \"100%\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <CommentButton />\n                {comment_list.length}\n              </div>\n              <div style={{ width: \"2rem\" }}></div>\n              <div\n                style={{\n                  display: \"flex\",\n                  lineHeight: \"1.5\",\n                  color: \"rgb(134, 142, 150)\",\n                  width: \"100%\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <HeartButton _onClick={changeLike} />\n                {post.recommendCnt}\n              </div>\n            </LikeCommentBox>\n          </InfoWrap>\n        </Grid>\n        <Grid>\n          <Image detail src={post.img}></Image>\n        </Grid>\n        <Grid>\n          <ContentBox>{post.content}</ContentBox>\n        </Grid>\n        <Grid margin=\"1rem 0px 0px 0px\">\n          <CommentBox>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <Input\n                _onChange={(e) => {\n                  setComment(e.target.value);\n                }}\n                placeholder=\"댓글 내용을 입력하세요.\"\n              />\n              <CommentAddBtn onClick={addComment}>게시</CommentAddBtn>\n            </div>\n            <CommentListBox>\n              {/* 댓글이 있는 게시글이면 댓글 표시, 없으면 빈값 */}\n              {comment_list ? (\n                comment_list.map((p, idx) => {\n                  return <CommentPost key={p._id} {...p} />;\n                })\n              ) : (\n                <></>\n              )}\n            </CommentListBox>\n          </CommentBox>\n        </Grid>\n      </Wrapper>\n    </React.Fragment>\n  );\n};\n\nPostDetail.defaultProps = {\n  title:\n    \"제목이 들어갈 자리입니다. 그래서 아무도 제목말고는 볼 수 없어요. 진짜에요.\",\n  user: \"작성자\",\n  createdAt: \"2000-00-00\",\n  category: \"카테고리\",\n  commentCnt: 0,\n  recommendCnt: 0,\n  img:\n    \"https://cdn.crowdpic.net/list-thumb/thumb_l_1ED169F054035E14E5A306D7947BC544.jpg\",\n  content: \"내용이 들어가는 자리입니다.\",\n  comment_user: \"박민경\",\n  comment_content: \"이게 대체 뭔소리에요??\",\n  comment_createdAt: \"2021-04-13\",\n  is_like: false,\n};\n\nconst CommentListBox = styled.div`\n  margin-top: 1.5rem;\n`;\n\nconst Button = styled.button`\n  width: auto;\n  height: 35px;\n  margin: 0px;\n  border: 0px solid;\n  background-color: #ccd6f1;\n  border-radius: 10px;\n  font-weight: 700;\n  font-size: 1rem;\n  box-shadow: rgb(0 0 0 / 30%) 0px 1.5px 2.5px 0px;\n`;\n\nconst CommentAddBtn = styled.button`\n  width: 4.5rem;\n  margin-left: 0.5rem;\n  padding: 0.75rem 4px;\n  align-items: center;\n  border: 0px solid;\n  background-color: #ccd6f1;\n  border-radius: 10px;\n  font-weight: 700;\n  font-size: 1rem;\n  box-shadow: rgb(0 0 0 / 30%) 0px 1.5px 2.5px 0px;\n  @media all and (max-width: 414px) {\n    height: 2.4rem;\n    font-size: 0.8rem;\n    width: 3rem;\n  }\n  @media all and (max-width: 375px) {\n    height: 2.4rem;\n    font-size: 0.8rem;\n    width: 3rem;\n  }\n`;\n\nconst Wrapper = styled.div`\n  width: 50rem;\n  height: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 6rem;\n  margin-bottom: 10rem;\n  padding: 100px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-radius: 4px;\n  box-shadow: rgb(0 0 0 / 30%) 0px 4px 16px 0px;\n  border-radius: 10px;\n  @media all and (min-width: 1024px) {\n    width: 50%;\n  }\n  @media all and (max-width: 768px) {\n    width: 60%;\n  }\n  @media all and (max-width: 414px) {\n    margin-top: 1rem;\n    width: 80%;\n    padding: 1rem;\n  }\n  @media all and (max-width: 375px) {\n    width: 80%;\n    padding: 1rem;\n    margin-top: 1rem;\n  }\n`;\n\nconst LikeCommentBox = styled.div`\n  border: none;\n  width: 6rem;\n  height: 100%;\n  background-color: white;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst ContentBox = styled.div`\n  overflow: scroll;\n  box-sizing: border-box;\n  border: 1px solid #dddddd;\n  width: 100%;\n  font-size: 1.3rem;\n  padding: 12px 4px;\n  height: 25rem;\n  padding: 2rem;\n  margin-top: 1rem;\n  @media all and (max-width: 1024px) {\n    height: 10rem;\n  }\n  @media all and (max-width: 414px) {\n    font-size: 0.7rem;\n  }\n  @media all and (max-width: 375px) {\n    font-size: 0.7rem;\n  }\n`;\n\nconst CommentBox = styled.div`\n  box-sizing: border-box;\n  border: 1px solid #dddddd;\n  width: 100%;\n  font-size: 1.3rem;\n  padding: 12px 4px;\n  height: 100%;\n  background-color: #f5f8ff;\n  padding: 2rem;\n  @media all and (max-width: 414px) {\n    font-size: 0.8rem;\n    padding: 0.7rem;\n  }\n  @media all and (max-width: 375px) {\n    font-size: 0.8rem;\n    padding: 0.7rem;\n  }\n`;\n\nconst InfoBox = styled.div`\n  font-size: 0.75rem;\n  line-height: 1.5;\n  color: rgb(134, 142, 150);\n`;\n\nconst InfoText = styled.span`\n  font-size: 1rem;\n  line-height: 1.5;\n  color: rgb(134, 142, 150);\n  @media all and (max-width: 414px) {\n    font-size: 0.7rem;\n  }\n  @media all and (max-width: 375px) {\n    font-size: 0.7rem;\n  }\n`;\n\nconst InfoWrap = styled.div`\n  margin: 0.7rem 0px;\n  display: flex;\n  box-sizing: border-box;\n  justify-content: space-between;\n`;\n\nconst Topbutton = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin: 0px 0px 0px 0px;\n\n  @media all and (max-width: 414px) {\n    & > div > button {\n      font-size: 0.5rem;\n      height: 2rem;\n    }\n  }\n\n  @media all and (max-width: 375px) {\n    & > div > button {\n      font-size: 0.5rem;\n      height: 2rem;\n    }\n  }\n`;\n\nexport default PostDetail;\n","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/PostWrite.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/Main.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/Login.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/PostEdit.js",["128"],"import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid, Input, Image } from \"../element/Index\";\n\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport { history } from \"../redux/configureStore\";\n\nconst PostEdit = (props) => {\n  const dispatch = useDispatch();\n  const post = useSelector((state) => state.post.post);\n\n  const post_id = props.match.params.id;\n\n  // 수정 시 현재 게시물의 content를 수정 인풋창에 띄워주기 위해 state의 default값을 post.content로 설정\n  const [contents, setContents] = React.useState(post.content);\n  const [title, setTitle] = React.useState(post.title);\n\n  const changeContents = (e) => {\n    setContents(e.target.value);\n  };\n\n  const changeTitle = (e) => {\n    setTitle(e.target.value);\n  };\n\n  // 수정 전 포스트 정보 가져오기\n  React.useEffect(() => {\n    dispatch(postActions.getOnePostDB(post_id));\n  }, []);\n\n  // 수정하기\n  const editPost = () => {\n    dispatch(postActions.editPostDB(contents, title, post_id));\n    history.push(\"/\");\n  };\n\n  return (\n    <React.Fragment>\n      <Wrapper>\n        <Grid>\n          <h3>게시글 수정</h3>\n          <TitleInput value={title} onChange={changeTitle}></TitleInput>\n        </Grid>\n        <Grid>\n          <Image detail src={post.img}></Image>\n        </Grid>\n        <Grid>\n          <Input\n            _onChange={changeContents}\n            multiline\n            value={contents}\n            placeholder=\"수정할 내용을 입력하세요.\"\n          />\n        </Grid>\n        <Grid is_flex padding=\"30px 0px\">\n          <Button onClick={editPost}>수정완료</Button>\n          <Button\n            onClick={() => {\n              history.replace(`/post/${post_id}`);\n            }}\n          >\n            취소\n          </Button>\n        </Grid>\n      </Wrapper>\n    </React.Fragment>\n  );\n};\n\nPostEdit.defaultProps = {\n  title: \"제목이에요. 진짜로\",\n  img: \"\",\n  content: \"내용이 들어가요.\",\n};\n\nconst Button = styled.button`\n  width: 100px;\n  height: 35px;\n  margin: 0px;\n  border: 0px solid;\n  font: inherit;\n  background-color: #ccd6f1;\n  border-radius: 10px;\n  box-shadow: rgb(0 0 0 / 30%) 0px 1.5px 2.5px 0px;\n  @media (max-width: 1024px) {\n    width: 5rem;\n    font-size: 0.9rem;\n    height: 2rem;\n    margin: 0px 2.2rem;\n  }\n  @media (max-width: 768px) {\n    width: 4.5rem;\n    font-size: 0.8rem;\n    height: 1.9rem;\n    margin: 0px 2rem;\n  }\n\n  @media (max-width: 540px) {\n    width: 4.5rem;\n    font-size: 0.7rem;\n    height: 1.7rem;\n    margin: 0px 1.5rem;\n  }\n  @media (max-width: 414px) {\n    width: 4rem;\n    font-size: 0.6rem;\n    height: 1.7rem;\n    margin: 0px 1.5rem;\n  }\n\n  @media (max-width: 375px) {\n    width: 4rem;\n    font-size: 0.7rem;\n    height: 1.7rem;\n    margin: 0px 1.5rem;\n  }\n`;\n\nconst Wrapper = styled.div`\n  width: 70rem;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 6rem;\n  margin-bottom: 10rem;\n  padding: 100px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  background: white;\n  border-radius: 4px;\n  box-shadow: rgb(0 0 0 / 30%) 0px 4px 16px 0px;\n  border-radius: 10px;\n\n  @media (max-width: 1024px) {\n    width: 40rem;\n    margin-top: 2rem;\n  }\n  @media (max-width: 768px) {\n    width: 28rem;\n    margin-top: 2rem;\n  }\n  @media (max-width: 540px) {\n    width: 21rem;\n    margin-top: 1.5rem;\n    padding: 4rem;\n  }\n  @media (max-width: 414px) {\n    width: 16.5rem;\n    padding: 3rem;\n    margin-top: 1.5rem;\n  }\n  @media (max-width: 375px) {\n    width: 13rem;\n    padding: 3rem;\n    margin-top: 2rem;\n    & > h1 {\n      font-size: 2rem;\n    }\n  }\n  @media (max-width: 280px) {\n    width: 9.7rem;\n    padding: 3rem;\n    margin-top: 1rem;\n  }\n`;\n\nconst TitleInput = styled.input`\n  width: 100%;\n  height: 40px;\n  font: inherit;\n  font-size: 1.3rem;\n  margin: 10px auto;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid 1px gray;\n  @media (max-width: 768px) {\n    width: 90%;\n  }\n  @media (max-width: 414px) {\n    font-size: 1rem;\n    height: 1rem;\n    padding: 10px 10px;\n    width: 90%;\n  }\n\n  @media (max-width: 375px) {\n    font-size: 1rem;\n    height: 1rem;\n    padding: 10px 10px;\n    width: auto;\n  }\n`;\n\nexport default PostEdit;\n","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/pages/Signup.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/user.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/comment.js",["129"],"import produce from \"immer\";\nimport { createAction, handleActions } from \"redux-actions\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { config } from \"../../shared/config\";\n\n// 액션\nconst SET_COMMENT = \"SET_COMMENT\"; // 댓글 불러오기\nconst ADD_COMMENT = \"ADD_COMMENT\"; // 댓글 추가\nconst DELETE_COMMENT = \"DELETE_COMMENT\"; // 댓글 삭제\n\n// 액션 생성함수\nconst setComment = createAction(SET_COMMENT, (list) => ({ list }));\nconst addComment = createAction(ADD_COMMENT, (post) => ({ post }));\nconst deleteComment = createAction(DELETE_COMMENT, (list) => ({ list }));\n\n// Initial State\nconst InitialState = {\n  list: [],\n};\n\n// DB에 댓글 추가\nconst addCommentDB = (user_name, comment, post_id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"post\",\n      url: `${config.api}/comment/${post_id}`,\n      data: { content: comment },\n    }).then((res) => {\n      console.log(res);\n      const new_comment_post = {\n        user: res.data.comment.user,\n        content: res.data.comment.content,\n        createdAt: res.data.comment.createdAt,\n        comment_id: moment(),\n      };\n      // console.log(new_comment_post);\n      dispatch(addComment(new_comment_post));\n    });\n  };\n};\n\n// DB 댓글정보 삭제\n// 현재 로그인유저 정보와 댓글 작성자 정보 비교 후 같으면 삭제(서버단에서 토큰값 이용해서 비교해주기로 함)\nconst deleteCommentDB = (comment_id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"delete\",\n      url: `${config.api}/comment/${comment_id}`,\n      data: {\n        _id: comment_id,\n      },\n    })\n      .then((res) => {\n        // console.log(res);\n        dispatch(deleteComment(comment_id));\n      })\n      .catch((err) => {\n        console.log(\"댓글삭제 에러\", err);\n      });\n  };\n};\n\n// 댓글 리스트 가져오기\n// 포스트 정보 안에 댓글리스트가 같이 들어있기때문에 post_id 값을 이용해서 댓글리스트 찾고 가져와야함\nconst getCommentDB = (post_id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"get\",\n      url: `${config.api}/comment/${post_id}`,\n    })\n      .then((docs) => {\n        const comment_list = docs.data.comments;\n        // console.log(comment_list);\n        dispatch(setComment(comment_list));\n      })\n      .catch((err) => {\n        console.log(\"댓글 가져오기 에러\", err);\n      });\n  };\n};\n\n// 리듀서\nexport default handleActions(\n  {\n    [SET_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload);\n        draft.list = action.payload.list;\n      }),\n\n    [ADD_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload.post);\n        const new_comment = action.payload.post;\n        //가장 앞에 새로운 댓글 추가하기\n        draft.list.unshift(new_comment);\n      }),\n\n    [DELETE_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        // 액션으로 넘어온 삭제될 댓글을 제외하고 filter 하여 댓글리스트 업데이트\n        let new_comment_list = draft.list.filter((c) => {\n          if (c._id !== action.payload.list) {\n            return c;\n          }\n        });\n        draft.list = new_comment_list;\n      }),\n  },\n  InitialState\n);\n\nconst actionCreators = {\n  setComment,\n  addComment,\n  deleteComment,\n  deleteCommentDB,\n  getCommentDB,\n  addCommentDB,\n};\n\nexport { actionCreators };\n","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/redux/modules/post.js",["130","131"],"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { config } from \"../../shared/config\";\nimport moment from \"moment\";\n\nimport axios from \"axios\";\n\nconst SET_POST = \"SET_POST\"; // 게시글 목록 불러오기\nconst ADD_POST = \"ADD_POST\"; // 게시글 작성\nconst GET_POST = \"GET_POST\"; // 게시글 상세 불러오기\nconst DELETE_POST = \"DELETE_POST\"; // 게시글 삭제\nconst EDIT_POST = \"EDIT_POST\"; // 게시글 수정\n\nconst TOGGLE_LIKE = \"TOGGLE_LIKE\"; // 좋아요 토글\n\nconst setPost = createAction(SET_POST, (post_list, text) => ({\n  post_list,\n  text,\n}));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst getPost = createAction(GET_POST, (post, is_like) => ({ post, is_like }));\nconst deletePost = createAction(DELETE_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post) => ({ post }));\n\n// 좋아요\nconst toggleLike = createAction(TOGGLE_LIKE, (post, is_like) => ({\n  post,\n  is_like,\n}));\n\nconst initialState = {\n  list: [],\n  post: [],\n  is_like: false,\n  text: null,\n};\n\nconst addPostDB = (title, content, imgfile, category, username) => {\n  return function (dispatch, getState, { history }) {\n    // 이미지가 포함되어있기때문에 formdata로 서버와 소통한다.\n    let formdata = new FormData();\n    formdata.append(\"title\", title);\n    formdata.append(\"img\", imgfile);\n    formdata.append(\"content\", content);\n    formdata.append(\"category\", category);\n    formdata.append(\"user\", username);\n\n    // // formdata 내부 확인하는 방법\n    // for (var key of formdata.keys()) {\n    //   console.log(key);\n    // }\n    // for (var value of formdata.values()) {\n    //   console.log(value);\n    // }\n\n    axios({\n      method: \"post\",\n      url: `${config.api}/post/write`,\n      data: formdata,\n      header: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    }).then((res) => {\n      console.log(res);\n      const new_post = {\n        title: res.data.newPost.title,\n        category: res.data.newPost.category,\n        content: res.data.newPost.content,\n        createdAt: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n        recommendCnt: res.data.newPost.recommendCnt,\n        comment: res.data.newPost.comment,\n        recommendUser: res.data.newPost.recommendUser,\n        img: res.data.newPost.img,\n        user: res.data.newPost.user,\n      };\n      dispatch(addPost(new_post));\n    });\n  };\n};\n\nconst setPostDB = (text = null, page = 1) => {\n  return function (dispatch, getState, { history }) {\n    // 카테고리 값이 없으면 전체 목록 보여주기\n    if (text === null) {\n      axios({\n        method: \"get\",\n        url: `${config.api}/post?page=${page}`,\n      }).then((docs) => {\n        const post_list = docs.data;\n        // console.log(post_list);\n\n        // 페이지 이동 시, 포스트가 하나라도 없다면\n        if (post_list.post.length == 0) {\n          window.alert(\"마지막 페이지입니다\");\n          return;\n        }\n        dispatch(setPost(post_list));\n      });\n      // 카테고리별로 보여주기\n    } else {\n      axios({\n        method: \"get\",\n        url: `${config.api}/post/${text}`,\n      }).then((docs) => {\n        const post_list = docs.data;\n        // console.log(post_list);\n        if (post_list.post.length === 0) {\n          window.alert(\"마지막 페이지입니다\");\n          return;\n        }\n        dispatch(setPost(post_list, text));\n      });\n    }\n  };\n};\n\nconst getOnePostDB = (id) => {\n  return function (dispatch, getState, { history }) {\n    // 좋아요 상태 state 값에서 가져오기\n    let is_like = getState().post.is_like;\n\n    // 로그인한 유저의 정보 state 값에서 가져오기\n    let _user = getState().user.user;\n\n    axios({\n      method: \"get\",\n      url: `${config.api}/post/detail/${id}`,\n    })\n      .then((docs) => {\n        // console.log(docs.data);\n        const onePost = docs.data.post;\n        // console.log(onePost);\n\n        // 좋아요 버튼 상황별 활성화 위해 is_like로 현재 좋아요 상태 체크 할 것임\n        // 좋아요한 유저리스트에 정보가 없으면 is_like는 비활성화상태(false) 있으면 활성화(true)\n        // console.log(_user.id);\n        is_like =\n          onePost.recommendUser.findIndex((p) => p === _user.id) === -1\n            ? false\n            : true;\n\n        dispatch(getPost(onePost, is_like));\n      })\n      .catch((err) => {\n        console.log(\"에러\", err);\n      });\n  };\n};\n\nconst editPostDB = (content, title, id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"patch\",\n      url: `${config.api}/post/${id}`,\n      data: {\n        content: content,\n        title: title,\n      },\n    })\n      .then(() => {\n        let new_post_data = {\n          // 새로 받은 값들로 덮어쓰기한다.\n          title: title,\n          _id: id,\n          content: content,\n        };\n        // console.log(new_post_data);\n        dispatch(editPost(new_post_data));\n        window.alert(\"수정 되었습니다!\");\n      })\n      .catch((err) => {\n        console.log(\"수정에러\", err);\n      });\n  };\n};\n\n// 게시글 DB에서 삭제\nconst deletePostDB = (id) => {\n  return function (dispatch, getState, { history }) {\n    axios({\n      method: \"delete\",\n      url: `${config.api}/post/${id}`,\n      data: {\n        _id: id,\n      },\n    })\n      .then((res) => {\n        // console.log(res);\n        dispatch(deletePost(id));\n      })\n      .catch((err) => {\n        console.log(\"삭제에러\", err);\n      });\n  };\n};\n\n// 좋아요 DB 반영\nconst toggleLikeDB = (post_id, is_like) => {\n  return function (dispatch, getState, { history }) {\n    // 현재 포스트의 정보\n    let _post = getState().post.post;\n\n    // 현재 포스트의 좋아요 수\n    let recommendCnt = _post.recommendCnt;\n\n    axios({\n      method: \"POST\",\n      url: `${config.api}/post/recommend/${post_id}`,\n    }).then((res) => {\n      console.log(res.data.success);\n      // success 가 true이면 좋아요 +1, false면 좋아요 -1\n      recommendCnt = res.data.success ? recommendCnt + 1 : recommendCnt - 1;\n\n      // 좋아요 상태 success로 T/F 구분\n      is_like = res.data.success ? true : false;\n\n      // 변동된 좋아요 수 반영한 현재 포스트 - 좋아요유저는 데이터상에서 추가하기로함\n      const like_post = {\n        ..._post,\n        recommendCnt: recommendCnt,\n      };\n      // console.log(like_post);\n\n      dispatch(toggleLike(like_post, is_like));\n    });\n  };\n};\n\n// 리듀서\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.post_list.post;\n        draft.text = action.payload.text;\n      }),\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload.post);\n        const new_post = action.payload.post;\n        draft.list.unshift(new_post);\n      }),\n\n    [GET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(action.payload);\n        draft.post = action.payload.post;\n        draft.is_like = action.payload.is_like;\n      }),\n\n    [DELETE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 받아온 id값과 맞지 않는 id의 데이터들을 새로운 배열에 넣어서 기존 list에 덮어쓰기해준다.\n        let new_post_list = draft.list.filter((p) => {\n          if (p.id !== action.payload.post) {\n            return p;\n          }\n        });\n        draft.list = new_post_list; // 새롭게 바뀐 리스트를 현재의 리스트로 변경\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        // 수정할 포스트의 id로 인덱스를 찾는다.\n        let idx = draft.list.findIndex(\n          (p) => p._id === action.payload.post._id\n        );\n        draft.post = action.payload.post; // 하나의 포스트의 값들을 최신 값으로 바꿔주고,\n        draft.list[idx] = draft.post; // 수정된 값이 들어간 post를 list[idx] 값에 넣어준다.\n        console.log(idx);\n      }),\n\n    [TOGGLE_LIKE]: (state, action) =>\n      produce(state, (draft) => {\n        // 좋아요 숫자가 변동된 post 정보를 업데이트 해주고 is_like 상태도 업데이트 해준다.\n        draft.post = action.payload.post;\n        draft.is_like = action.payload.is_like;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPost,\n  setPostDB,\n  getOnePostDB,\n  editPostDB,\n  deletePostDB,\n  addPostDB,\n  toggleLikeDB,\n};\n\nexport { actionCreators };\n","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/Header.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/CommentButton.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/CommentPost.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/HeartButton.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/common.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/category.js",["132"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\n\nimport icon from \"../shared/icon.png\";\n\nconst Category = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState(\"\");\n\n  // 버튼 클릭 시 카테고리 값을 text로 보내서 해당된 게시글만 불러오기.\n  React.useEffect(() => {\n    dispatch(postActions.setPostDB(text));\n  }, [text]);\n\n  return (\n    <React.Fragment>\n      <Wrap>\n        <Div>\n          <div style={{ marginBottom: \"2.5rem\" }}></div>\n          <ButtonBox\n            onClick={() => {\n              setText(\"음악\");\n            }}\n          >\n            <Icon>음악</Icon>\n          </ButtonBox>\n          <ButtonBox\n            onClick={() => {\n              setText(\"여행\");\n            }}\n          >\n            <Icon>여행</Icon>\n          </ButtonBox>\n          <ButtonBox\n            onClick={() => {\n              setText(\"맛집\");\n            }}\n          >\n            <Icon>맛집</Icon>\n          </ButtonBox>\n          <ButtonBox\n            onClick={() => {\n              setText(\"반려동물\");\n            }}\n          >\n            <Icon>반려동물</Icon>\n          </ButtonBox>\n        </Div>\n      </Wrap>\n    </React.Fragment>\n  );\n};\n\nexport default Category;\n\nconst Wrap = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  margin: 15px auto 0px auto;\n  margin-bottom: 30px;\n  box-sizing: border-box;\n`;\n\nconst Div = styled.div`\n  width: 100vw;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  @media (max-width: 1024px) {\n    width: 80%;\n    height: auto;\n    justify-content: center;\n  }\n\n  @media (max-width: 767px) {\n    width: 100%;\n    height: auto;\n    justify-content: center;\n  }\n`;\nconst ButtonBox = styled.div`\n  flex-direction: column;\n  text-align: center;\n  width: 9rem;\n  height: 9rem;\n  display: flex;\n  font: inherit;\n  font-weight: 800;\n  font-size: 17px;\n  margin: 0px 3rem;\n\n  :hover {\n    transition: all 0.3s;\n    font-weight: bold;\n    transform: translateY(-4px);\n  }\n\n  @media (max-width: 1024px) {\n    width: 9rem;\n    height: auto;\n    justify-content: center;\n    margin: 0px;\n    & div {\n      width: 9rem;\n      height: 9rem;\n      font-size: 15px;\n    }\n  }\n\n  @media (max-width: 767px) {\n    width: 6.5rem;\n    height: auto;\n    justify-content: center;\n    margin: 0px;\n    & div {\n      width: 6.5rem;\n      height: 6.5rem;\n      font-size: 15px;\n    }\n  }\n  @media (max-width: 414px) {\n    width: 4.7rem;\n    height: auto;\n    justify-content: center;\n    margin: 0px;\n    & div {\n      width: 5rem;\n      height: 5rem;\n      font-size: 12px;\n    }\n  }\n\n  @media (max-width: 375px) {\n    width: 5rem;\n    height: auto;\n    justify-content: center;\n    margin: 0px;\n    & div {\n      width: 5rem;\n      height: 5rem;\n      font-size: 12px;\n    }\n  }\n\n  @media (max-width: 280px) {\n    width: 6rem;\n    height: auto;\n    justify-content: center;\n    margin: 0px;\n    & div {\n      width: 5.5rem;\n      height: 5.5rem;\n      font-size: 12px;\n    }\n  }\n`;\nconst Icon = styled.div`\n  display: flex;\n  width: 9rem;\n  height: 9rem;\n  background-size: cover;\n  background-image: url(\"${icon}\");\n  align-items: flex-end;\n  justify-content: center;\n`;\n","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/shared/config.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/PostList.js",["133","134"],"import React, { useState } from \"react\";\nimport Post from \"./Post\";\n\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { history } from \"../redux/configureStore\";\n\nimport { actionCreators as postActions } from \"../redux/modules/post\";\n\nimport LArrow from \"../shared/LArrow.png\";\nimport RArrow from \"../shared/RArrow.png\";\n\nconst PostList = () => {\n  const dispatch = useDispatch();\n\n  // 카테고리 값 불러오기\n  const text = useSelector((state) => state.post.text);\n\n  // 페이지네이션 초기값 1페이지로 설정\n  const [page, setPage] = useState(1);\n\n  // 다음 페이지로 이동\n  const pageUp = () => {\n    setPage(page + 1);\n  };\n\n  // 이전 페이지로 이동\n  const pageDown = () => {\n    if (page === 1) {\n      // 첫 페이지일 때 클릭하면 현재가 첫페이지라는 알림울리고 끝내기\n      window.alert(\"첫 페이지입니다.\");\n      return;\n    }\n    setPage(page - 1);\n  };\n\n  // 페이지 변경 시마다 그 페이지에 상속된 게시글 정보 불러옴\n  React.useEffect(() => {\n    dispatch(postActions.setPostDB(text, page)); // 현재 카테고리(text)와 페이지 번호(page)에 해당되는 포스트값들 불러오는 함수 실행\n  }, [page]); // page 숫자 변할때마다 가져와야하는 포스트들이 달라지기때문에 두번째항에 page 입력\n\n  const post_list = useSelector((state) => state.post.list); // post는 모듈js를 뜻함 post.js 모듈에서 initialState에 list 값을 가져옴\n\n  // 처음 실행 시 모든 게시글의 정보 불러오기(카테고리구분x)\n  React.useEffect(() => {\n    dispatch(postActions.setPostDB());\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Wrap>\n        <LeftArrow onClick={pageDown}></LeftArrow>\n        <PostWrap>\n          {post_list.map((p, idx) => {\n            let id = p._id;\n            return (\n              <div\n                key={id}\n                onClick={() => {\n                  history.push(`post/${id}`);\n                }}\n              >\n                <Post {...p} />\n              </div>\n            );\n          })}\n        </PostWrap>\n        <RightArrow onClick={pageUp}></RightArrow>\n      </Wrap>\n    </React.Fragment>\n  );\n};\n\nexport default PostList;\n\nconst Wrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n  @media (max-width: 1024px) {\n    & > button {\n      background-size: 4rem 4rem;\n      width: 4rem;\n      height: 4rem;\n    }\n    & > div {\n      width: 75%;\n    }\n  }\n  @media (max-width: 768px) {\n    & > button {\n      background-size: 3rem 3rem;\n      width: 3rem;\n      height: 3rem;\n    }\n    & > div {\n      width: 70%;\n    }\n  }\n  @media (max-width: 414px) {\n    & > button {\n      background-size: 2.2rem 2.2rem;\n      width: 2.2rem;\n      height: 2.2rem;\n      margin: 0px 10px;\n    }\n    & > div {\n      width: 70%;\n    }\n  }\n  @media (max-width: 375px) {\n    & > button {\n      background-size: 2rem 2rem;\n      width: 2rem;\n      height: 2rem;\n      margin: 0px 10px;\n    }\n  }\n  @media (max-width: 280px) {\n    & > button {\n      background-size: 1.5rem 1.5rem;\n      width: 1.5rem;\n      height: 1.5rem;\n      margin: 0px 5px;\n    }\n  }\n`;\n\nconst PostWrap = styled.div`\n  flex-wrap: wrap;\n  display: flex;\n  width: 62.5rem;\n  margin: 0px auto;\n  justify-content: space-around;\n`;\n\nconst LeftArrow = styled.button`\n  background-image: url(${LArrow});\n  background-size: 4.5rem 4.5rem;\n  background-color: #ffffff;\n  width: 4.5rem;\n  height: 4.5rem;\n  margin-left: 1.5rem;\n  border: none;\n`;\n\nconst RightArrow = styled.button`\n  background-image: url(${RArrow});\n  background-size: 4.5rem 4.5rem;\n  background-color: #ffffff;\n  width: 4.5rem;\n  height: 4.5rem;\n  margin-right: 1.5rem;\n  border: none;\n`;\n","/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Index.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/components/Post.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Grid.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Input.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Image.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Text.js",[],"/Users/parkminkyung/Desktop/git/HobbyGram-Front/src/element/Upload.js",[],{"ruleId":"135","severity":1,"message":"136","line":29,"column":6,"nodeType":"137","endLine":29,"endColumn":8,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":16,"column":10,"nodeType":"141","messageId":"142","endLine":16,"endColumn":23},{"ruleId":"135","severity":1,"message":"143","line":33,"column":6,"nodeType":"137","endLine":33,"endColumn":12,"suggestions":"144"},{"ruleId":"135","severity":1,"message":"143","line":31,"column":6,"nodeType":"137","endLine":31,"endColumn":8,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":103,"column":54,"nodeType":"148","messageId":"149","endLine":103,"endColumn":56},{"ruleId":"150","severity":1,"message":"151","line":93,"column":35,"nodeType":"152","messageId":"153","endLine":93,"endColumn":37},{"ruleId":"146","severity":1,"message":"147","line":254,"column":51,"nodeType":"148","messageId":"149","endLine":254,"endColumn":53},{"ruleId":"135","severity":1,"message":"154","line":15,"column":6,"nodeType":"137","endLine":15,"endColumn":12,"suggestions":"155"},{"ruleId":"135","severity":1,"message":"156","line":40,"column":6,"nodeType":"137","endLine":40,"endColumn":12,"suggestions":"157"},{"ruleId":"135","severity":1,"message":"154","line":47,"column":6,"nodeType":"137","endLine":47,"endColumn":8,"suggestions":"158"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'cookie' and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["159"],"no-unused-vars","'RepeatRounded' is defined but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'dispatch' and 'post_id'. Either include them or remove the dependency array.",["160"],["161"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["162"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'text'. Either include them or remove the dependency array.",["163"],["164"],{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [cookie, dispatch]",{"range":"177","text":"178"},"Update the dependencies array to be: [dispatch, post_id, user]",{"range":"179","text":"180"},"Update the dependencies array to be: [dispatch, post_id]",{"range":"181","text":"182"},"Update the dependencies array to be: [dispatch, text]",{"range":"183","text":"184"},"Update the dependencies array to be: [dispatch, page, text]",{"range":"185","text":"186"},"Update the dependencies array to be: [dispatch]",{"range":"187","text":"188"},[926,928],"[cookie, dispatch]",[1092,1098],"[dispatch, post_id, user]",[906,908],"[dispatch, post_id]",[456,462],"[dispatch, text]",[1008,1014],"[dispatch, page, text]",[1297,1299],"[dispatch]"]